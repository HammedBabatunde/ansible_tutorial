---
- name: Setup Vprofile Stack
  hosts: localhost
  connection: local
  gather_facts: no
  tasks:
    - name: Import VPC setup variable
      include_vars: vpc/vars/output_vars

    - name: Import vprofile setup variable
      include_vars: vpc/vars/vprostacksetup

    - name: Create vprofile ec2 key
      ec2_key:
        name: vprokey
        region: "{{region}}"
      register: vprokey_out
    
    - name: Save private key into file loginkey_vpro.pem
      copy:
        content: "{{vprokey_out.key.private_key}}"
        dest: "loginkey_vpro.pem"
        mode: 0600
      when: vprokey_out.changed

    - name: Create Security Group for Load Balancer
      ec2_group:
        name: vproELB-sg
        description: Allow port 80 from everywhere and all port within sg
        vpc_id: "{{ vpc_id }}"
        region: "{{ region }}"
        rules:
          - proto: tcp
            from_port: 80
            to_port: 80
            cidr_ip: 0.0.0.0/0
      register: vproELBSG_out

    - name: Create Security Group for Vprofile Stack
      ec2_group:
        name: vproStack-sg
        description: Allow port 22 from everywhere and all port within sg
        vpc_id: "{{ vpc_id }}"
        region: "{{ region }}"
        purge_rules: no
        rules:
          - proto: tcp
            from_port: 80
            to_port: 80
            group_id: "{{ vproELBSG_out.group_id }}"

          - proto: tcp
            from_port: 22
            to_port: 22
            group_id: "{{ BastionSGid }}"
      register: vproStackSG_out

    - name: Update Security Group with its own sg id
      ec2_group:
        name: vproStack-sg
        description: Allow port 22 from everywhere and all port within sg
        vpc_id: "{{ vpc_id }}"
        region: "{{ region }}"
        purge_rules: no
        rules:
          - proto: all
            group_id: "{{ vproStackSG_out.group_id }}"
    
    - name: Create Ngnix web01
      amazon.aws.ec2_instance:
        key_name: vprokey
        region: "{{ region }}"
        instance_type: t2.micro
        image_id: "{{ ngnix_ami }}"
        wait: yes
        wait_timeout: 300
        tags:
          Name: "web01"
          Project: Vprofile
          Owner: DevOps Team
        exact_count: 1
        security_group: "{{ vproStackSG_out.group_id }}"
        vpc_subnet_id: "{{ privsub1_id }}"
      register: web01_out

    - name: Create tomcat app01
      amazon.aws.ec2_instance:
        key_name: vprokey
        region: "{{ region }}"
        instance_type: t2.micro
        image_id: "{{ tomcat_ami }}"
        wait: yes
        wait_timeout: 300
        tags:
          Name: "app01"
          Project: Vprofile
          Owner: DevOps Team
        exact_count: 1
        security_group: "{{ vproStackSG_out.group_id }}"
        vpc_subnet_id: "{{ privsub1_id }}"
      register: app01_out

    - name: Create memcache mc01
      amazon.aws.ec2_instance:
        key_name: vprokey
        region: "{{ region }}"
        instance_type: t2.micro
        image_id: "{{ memcache_ami }}"
        wait: yes
        wait_timeout: 300
        tags:
          Name: "mc01"
          Project: Vprofile
          Owner: DevOps Team
        exact_count: 1
        security_group: "{{ vproStackSG_out.group_id }}"
        vpc_subnet_id: "{{ privsub1_id }}"
      register: mc01_out
    
    - name: Create RabbitMQ rmq01
      amazon.aws.ec2_instance:
        key_name: vprokey
        region: "{{ region }}"
        instance_type: t2.micro
        image_id: "{{ rmq_ami }}"
        wait: yes
        wait_timeout: 300
        tags:
          Name: "rmq01"
          Project: Vprofile
          Owner: DevOps Team
        exact_count: 1
        security_group: "{{ vproStackSG_out.group_id }}"
        vpc_subnet_id: "{{ privsub1_id }}"
      register: rmq01_out
    
    - name: Create Mysql db01
      amazon.aws.ec2_instance:
        key_name: vprokey
        region: "{{ region }}"
        instance_type: t2.micro
        image_id: "{{ mysql_ami }}"
        wait: yes
        wait_timeout: 300
        tags:
          Name: "db01"
          Project: Vprofile
          Owner: DevOps Team
        exact_count: 1
        security_group: "{{ vproStackSG_out.group_id }}"
        vpc_subnet_id: "{{ privsub1_id }}"
      register: db01_out
    
    - debug:
        var: db01_out
    
  